// SPDX-License-Identifier: MIT
pragma solidity ^0.8.11;
import "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";

import "./IPancakeRouter02.sol";
import "./IPancakeFactory.sol";
import "./IPancakePair.sol";

contract Token2 is Initializable, ERC20Upgradeable, AccessControlUpgradeable {
    using SafeMathUpgradeable for uint256;
    address default_admin;
    uint8 private _decimals;
    address payable public marketingAddress; // Marketing Address

    address payable public liquidityAddress; // Liquidity Address
    mapping (address => bool) public bots;
    mapping(address => bool) private _isExcludedFromFee;
    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");
    uint256 private constant BUY = 1;
    uint256 private constant SELL = 2;
    uint256 private constant TRANSFER = 3;
    uint256 private _buyOrSellSwitch;

    uint256 private _liquidityFee;
    uint256 private _previousLiquidityFee;

    uint256 public buyLiquidityFee;
    uint256 public buyMarketingFee;
    uint256 public maxBuyFee;

    uint256 public sellLiquidityFee;
    uint256 public sellMarketingFee;
    uint256 public maxSellFee;
    bool public limitsInEffect;
    bool public tradingActive;

    mapping(address => bool) public isExcludedMaxTransactionAmount;

    // Anti-bot and anti-whale mappings and variables
    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch
    bool public transferDelayEnabled;

    uint256 private _liquidityTokensToSwap;
    uint256 private _marketingTokensToSwap;

    bool private _gasLimitActive;
    uint256 private _gasPriceLimit;

    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses
    // could be subject to a maximum transfer amount
    mapping(address => bool) public automatedMarketMakerPairs;

    uint256 public minimumTokensBeforeSwap;
    uint256 public maxTransactionAmount;
    uint256 public maxWallet;

    IPancakeRouter02 public pancakeV2Router;
    address public pancakeV2Pair;

    bool inSwapAndLiquify;
    bool public swapAndLiquifyEnabled;

    event SwapAndLiquifyEnabledUpdated(bool enabled);
    event SwapAndLiquify(
        uint256 tokensSwapped,
        uint256 ethReceived,
        uint256 tokensIntoLiqudity
    );


    event SwapTokensForETH(uint256 amountIn, address[] path);

    event ExcludedMaxTransactionAmount(
        address indexed account,
        bool isExcluded
    );
    event LogAddBots(address[] bots);
    event LogRemoveBots(address[] notbots);
    function initialize(
        string memory name,
        string memory symbol,
        uint8 __decimals,
        address _pancakeV2RouterAddress,
        bool[5] memory _bool_params,
        uint256[11] memory _uint_params        
    ) public initializer {
        __ERC20_init(name, symbol);
        _decimals = __decimals;
        __AccessControl_init();
        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _mint(msg.sender, _uint_params[0]);
        default_admin = msg.sender;
        pancakeV2Router = IPancakeRouter02(_pancakeV2RouterAddress);
        limitsInEffect = _bool_params[0];
        transferDelayEnabled = _bool_params[1];
        _gasLimitActive = _bool_params[2];
        tradingActive = _bool_params[3];
        _gasPriceLimit = _uint_params[10] * 1 gwei;
        swapAndLiquifyEnabled = _bool_params[4];

        buyLiquidityFee = _uint_params[1];
        buyMarketingFee = _uint_params[2];
        sellLiquidityFee = _uint_params[3];
        sellMarketingFee = _uint_params[4];
        minimumTokensBeforeSwap = _uint_params[5];
        maxTransactionAmount = _uint_params[6];
        maxWallet = _uint_params[7];

        pancakeV2Pair = IPancakeFactory(pancakeV2Router.factory())
            .createPair(address(this), pancakeV2Router.WETH());

        marketingAddress = payable(msg.sender); // update to marketing address
        liquidityAddress = payable(address(0xdead)); // update to a liquidity wallet if you don't want to burn LP tokens generated by the contract.

        _setAutomatedMarketMakerPair(pancakeV2Pair, true);

        _isExcludedFromFee[msg.sender] = true;
        _isExcludedFromFee[address(this)] = true;
        _isExcludedFromFee[liquidityAddress] = true;

        excludeFromMaxTransaction(msg.sender, true);
        excludeFromMaxTransaction(address(this), true);
        excludeFromMaxTransaction(address(pancakeV2Router), true);
        excludeFromMaxTransaction(address(0xdead), true);
        maxBuyFee = _uint_params[8];
        maxSellFee = _uint_params[9];
    }

    modifier lockTheSwap() {
        inSwapAndLiquify = true;
        _;
        inSwapAndLiquify = false;
    }

    function decimals() public view virtual override returns (uint8) {
        return _decimals;
    }

    // once enabled, can never be turned off
    function enableTrading() external onlyRole(DEFAULT_ADMIN_ROLE) {
        tradingActive = true;
        swapAndLiquifyEnabled = true;
    }

    function minimumTokensBeforeSwapAmount() external view returns (uint256) {
        return minimumTokensBeforeSwap;
    }

    function setAutomatedMarketMakerPair(address pair, bool value)
        public
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        require(
            pair != pancakeV2Pair,
            "The pair cannot be removed from automatedMarketMakerPairs"
        );

        _setAutomatedMarketMakerPair(pair, value);
    }

    function _setAutomatedMarketMakerPair(address pair, bool value) private {
        automatedMarketMakerPairs[pair] = value;

        excludeFromMaxTransaction(pair, value);
    }

    function setProtectionSettings(bool antiGas)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        _gasLimitActive = antiGas;
    }

    function setGasPriceLimit(uint256 gas)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        require(gas >= 300);
        _gasPriceLimit = gas * 1 gwei;
    }

    // disable Transfer delay
    function disableTransferDelay()
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
        returns (bool)
    {
        transferDelayEnabled = false;
        return true;
    }

    // for one-time airdrop feature after contract launch
    function airdropToWallets(
        address[] memory airdropWallets,
        uint256[] memory amount
    ) external onlyRole(DEFAULT_ADMIN_ROLE) {
        require(
            airdropWallets.length == amount.length,
            "airdropToWallets:: Arrays must be the same length"
        );
        for (uint256 i = 0; i < airdropWallets.length; i++) {
            address wallet = airdropWallets[i];
            uint256 airdropAmount = amount[i];
            super._transfer(msg.sender, wallet, airdropAmount);
        }
    }

    // remove limits after token is stable - 30-60 minutes
    function removeLimits()
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
        returns (bool)
    {
        limitsInEffect = false;
        _gasLimitActive = false;
        transferDelayEnabled = false;
        return true;
    }

    function excludeFromMaxTransaction(address updAds, bool isEx)
        public
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        isExcludedMaxTransactionAmount[updAds] = isEx;
        emit ExcludedMaxTransactionAmount(updAds, isEx);
    }

    function _swapBack() private lockTheSwap {
        uint256 contractBalance = balanceOf(address(this));
        bool success;
        uint256 totalTokensToSwap = _liquidityTokensToSwap +
            _marketingTokensToSwap;
        if (totalTokensToSwap == 0 || contractBalance == 0) {
            return;
        }

        // Halve the amount of liquidity tokens
        uint256 tokensForLiquidity = ((contractBalance *
            _liquidityTokensToSwap) / totalTokensToSwap) / 2;
        uint256 amountToSwapForBNB = contractBalance.sub(tokensForLiquidity);

        uint256 initialBNBBalance = address(this).balance;

        _swapTokensForBNB(amountToSwapForBNB);

        uint256 bnbBalance = address(this).balance.sub(initialBNBBalance);

        uint256 bnbForMarketing = bnbBalance.mul(_marketingTokensToSwap).div(
            totalTokensToSwap
        );

        uint256 bnbForLiquidity = bnbBalance - bnbForMarketing;

        _liquidityTokensToSwap = 0;
        _marketingTokensToSwap = 0;

        if (tokensForLiquidity > 0 && bnbForLiquidity > 0) {
            _addLiquidity(tokensForLiquidity, bnbForLiquidity);
            emit SwapAndLiquify(
                amountToSwapForBNB,
                bnbForLiquidity,
                tokensForLiquidity
            );
        }

        (success, ) = address(marketingAddress).call{
            value: address(this).balance
        }("");
    }

    function _swapTokensForBNB(uint256 tokenAmount) private {
        address[] memory path = new address[](2);
        path[0] = address(this);
        path[1] = pancakeV2Router.WETH();
        _approve(address(this), address(pancakeV2Router), tokenAmount);
        pancakeV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(
            tokenAmount,
            0, // accept any amount of ETH
            path,
            address(this),
            block.timestamp
        );
    }

    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {
        _approve(address(this), address(pancakeV2Router), tokenAmount);
        pancakeV2Router.addLiquidityETH{value: ethAmount}(
            address(this),
            tokenAmount,
            0, // slippage is unavoidable
            0, // slippage is unavoidable
            liquidityAddress,
            block.timestamp
        );
    }

    function _transfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual override {
        require(from != address(0), "ERC20: transfer from the zero address");
        require(to != address(0), "ERC20: transfer to the zero address");
        require(amount > 0, "Transfer amount must be greater than zero");
        require(!bots[from] && !bots[to]);
        if (!tradingActive) {
            require(
                _isExcludedFromFee[from] || _isExcludedFromFee[to],
                "Trading is not active yet."
            );
        }

        if (limitsInEffect) {
            if (
                from != default_admin &&
                to != default_admin &&
                to != address(0) &&
                to != address(0xdead) &&
                !inSwapAndLiquify
            ) {
                // only use to prevent sniper buys in the first blocks.
                if (_gasLimitActive && automatedMarketMakerPairs[from]) {
                    require(
                        tx.gasprice <= _gasPriceLimit,
                        "Gas price exceeds limit."
                    );
                }

                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.
                if (transferDelayEnabled) {
                    if (
                        to != default_admin &&
                        to != address(pancakeV2Router) &&
                        to != address(pancakeV2Pair)
                    ) {
                        require(
                            _holderLastTransferTimestamp[tx.origin] <
                                block.number,
                            "_transfer:: Transfer Delay enabled.  Only one purchase per block allowed."
                        );
                        _holderLastTransferTimestamp[tx.origin] = block.number;
                    }
                }

                //when buy
                if (
                    automatedMarketMakerPairs[from] &&
                    !isExcludedMaxTransactionAmount[to]
                ) {
                    require(
                        amount <= maxTransactionAmount,
                        "Buy transfer amount exceeds the maxTransactionAmount."
                    );
                    require(
                        amount + balanceOf(to) <= maxWallet,
                        "Cannot exceed max wallet"
                    );
                }
                //when sell
                else if (
                    automatedMarketMakerPairs[to] &&
                    !isExcludedMaxTransactionAmount[from]
                ) {
                    require(
                        amount <= maxTransactionAmount,
                        "Sell transfer amount exceeds the maxTransactionAmount."
                    );
                } else if (!isExcludedMaxTransactionAmount[to]) {
                    require(
                        amount + balanceOf(to) <= maxWallet,
                        "Cannot exceed max wallet"
                    );
                }
            }
        }

        uint256 contractTokenBalance = balanceOf(address(this));
        bool overMinimumTokenBalance = contractTokenBalance >=
            minimumTokensBeforeSwap;

        // Sell tokens for ETH
        if (
            !inSwapAndLiquify &&
            swapAndLiquifyEnabled &&
            balanceOf(pancakeV2Pair) > 0 &&
            overMinimumTokenBalance &&
            automatedMarketMakerPairs[to]
        ) {
            _swapBack();
        }

        _removeAllFee();

        _buyOrSellSwitch = TRANSFER;

        // If any account belongs to _isExcludedFromFee account then remove the fee
        if (!_isExcludedFromFee[from] && !_isExcludedFromFee[to]) {
            // Buy
            if (automatedMarketMakerPairs[from]) {
                _liquidityFee = buyLiquidityFee + buyMarketingFee;
                if (_liquidityFee > 0) {
                    _buyOrSellSwitch = BUY;
                }
            }
            // Sell
            else if (automatedMarketMakerPairs[to]) {
                _liquidityFee = sellLiquidityFee + sellMarketingFee;
                if (_liquidityFee > 0) {
                    _buyOrSellSwitch = SELL;
                }
            }
        }
        uint256 _tLiquidity = _calculateLiquidityFee(amount);
        super._transfer(from, to, amount.sub(_tLiquidity));
        _takeLiquidity(from, _tLiquidity);
        _restoreAllFee();
    }

    function _takeLiquidity(address from, uint256 _tLiquidity) private {
        if (_buyOrSellSwitch == BUY) {
            _liquidityTokensToSwap +=
                (_tLiquidity * buyLiquidityFee) /
                _liquidityFee;
            _marketingTokensToSwap +=
                (_tLiquidity * buyMarketingFee) /
                _liquidityFee;
        } else if (_buyOrSellSwitch == SELL) {
            _liquidityTokensToSwap +=
                (_tLiquidity * sellLiquidityFee) /
                _liquidityFee;
            _marketingTokensToSwap +=
                (_tLiquidity * sellMarketingFee) /
                _liquidityFee;
        }
        super._transfer(from, address(this), _tLiquidity);
    }

    function _calculateLiquidityFee(uint256 _amount)
        private
        view
        returns (uint256)
    {
        return _amount.mul(_liquidityFee).div(10**2);
    }

    function _removeAllFee() private {
        if (_liquidityFee == 0) return;

        _previousLiquidityFee = _liquidityFee;

        _liquidityFee = 0;
    }

    function _restoreAllFee() private {
        _liquidityFee = _previousLiquidityFee;
    }

    function isExcludedFromFee(address account) external view returns (bool) {
        return _isExcludedFromFee[account];
    }

    function excludeFromFee(address account)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        _isExcludedFromFee[account] = true;
    }

    function includeInFee(address account)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        _isExcludedFromFee[account] = false;
    }

    function setBuyFee(uint256 _buyLiquidityFee, uint256 _buyMarketingFee)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        buyLiquidityFee = _buyLiquidityFee;
        buyMarketingFee = _buyMarketingFee;
        require(
            buyLiquidityFee + buyMarketingFee <= maxBuyFee,
            "More than limit"
        );
    }

    function setSellFee(uint256 _sellLiquidityFee, uint256 _sellMarketingFee)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        sellLiquidityFee = _sellLiquidityFee;
        sellMarketingFee = _sellMarketingFee;
        require(
            sellLiquidityFee + sellMarketingFee <= maxSellFee,
            "More than limit"
        );
    }

    function setMarketingAddress(address _marketingAddress)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        marketingAddress = payable(_marketingAddress);
        _isExcludedFromFee[marketingAddress] = true;
    }

    function setLiquidityAddress(address _liquidityAddress)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        liquidityAddress = payable(_liquidityAddress);
        _isExcludedFromFee[liquidityAddress] = true;
    }

    function setSwapAndLiquifyEnabled(bool _enabled)
        public
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        swapAndLiquifyEnabled = _enabled;
        emit SwapAndLiquifyEnabledUpdated(_enabled);
    }

    // useful for buybacks or to reclaim any BNB on the contract in a way that helps holders.
    function buyBackTokens(uint256 bnbAmountInWei)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
    {
        // generate the pancake pair path of weth -> eth
        address[] memory path = new address[](2);
        path[0] = pancakeV2Router.WETH();
        path[1] = address(this);

        // make the swap
        pancakeV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{
            value: bnbAmountInWei
        }(
            0, // accept any amount of Ethereum
            path,
            address(0xdead),
            block.timestamp
        );
    }

    function transferForeignToken(address _token, address _to)
        external
        onlyRole(DEFAULT_ADMIN_ROLE)
        returns (bool _sent)
    {
        require(_token != address(this), "Can't withdraw native tokens");
        uint256 _contractBalance = IERC20(_token).balanceOf(address(this));
        _sent = IERC20(_token).transfer(_to, _contractBalance);
    }
    function mint(address _to, uint256 _amount) external onlyRole(MINTER_ROLE){
        require(_to != address(0), "_to can not be 0 address");
        if(_amount>0)
        {
            _mint(_to, _amount);
        }
        
    }

    function burn(uint256 _amount) external {
        if(_amount>0)
        {
            _burn(msg.sender, _amount);
        }
        
    }

    function addBots(address[] memory _bots) public onlyRole(DEFAULT_ADMIN_ROLE) {
        for (uint i = 0; i < _bots.length; i++) {
            bots[_bots[i]] = true;
        }
        emit LogAddBots(_bots);
    }
    
    function removeBots(address[] memory _notbots) public onlyRole(DEFAULT_ADMIN_ROLE) {
        for (uint i = 0; i < _notbots.length; i++) {
            bots[_notbots[i]] = false;
        }
        emit LogRemoveBots(_notbots);
    }
    receive() external payable {}

    fallback() external payable {}
}
